import csv
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, Filters

# Словарь для хранения информации о товарах
inventory = {}

csv_file_path = "TextFile1.csv"

dashboard_url = "http://127.0.0.1:8050/"

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Привет! Я бот управления складом. Используй команды /add, /update, /delete, /list, /dashboard.')

def add_item(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    message_text = update.message.text.split(maxsplit=1)[1]

    # Парсим информацию о товаре
    try:
        name, description, price, quantity, sold_quantity = message_text.split(',')
        price = float(price)
        quantity = int(quantity)
        sold_quantity = int(sold_quantity)
    except ValueError:
        update.message.reply_text('Ошибка в формате ввода. Используйте: /add Название, Описание, Цена, Количество, Продано')
        return

    # Проверяем, существует ли товар с таким названием
    if name in inventory:
        # Обновляем информацию о товаре в словаре
        inventory[name] = {'description': description, 'price': price, 'quantity': quantity, 'sold_quantity': sold_quantity}
        update.message.reply_text(f'Информация о товаре "{name}" обновлена.')
    else:
        # Добавляем новый товар в словарь
        inventory[name] = {'description': description, 'price': price, 'quantity': quantity, 'sold_quantity': sold_quantity}
        update.message.reply_text(f'Товар "{name}" добавлен на склад.')

    # Обновляем CSV файл
    with open(csv_file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Name', 'Description', 'Price', 'Quantity', 'Sold_Quantity'])
        for item_name, item_info in inventory.items():
            writer.writerow([item_name, item_info['description'], item_info['price'], item_info['quantity'], item_info['sold_quantity']])


def update_item(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    message_text = update.message.text.split(maxsplit=1)[1]

    # Парсим информацию о товаре
    try:
        name, description, price, quantity, sold_quantity = message_text.split(',')
        price = float(price)
        quantity = int(quantity)
        sold_quantity = int(sold_quantity)
    except ValueError:
        update.message.reply_text('Ошибка в формате ввода. Используйте: /update Название, Описание, Цена, Количество, Продано')
        return

    # Обновляем информацию о товаре в словаре
    if name in inventory:
        inventory[name] = {'description': description, 'price': price, 'quantity': quantity, 'sold_quantity': sold_quantity}
        update.message.reply_text(f'Информация о товаре "{name}" обновлена.')

        # Обновляем CSV файл
        with open(csv_file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Name', 'Description', 'Price', 'Quantity', 'Sold_Quantity'])
            for item_name, item_info in inventory.items():
                writer.writerow([item_name, item_info['description'], item_info['price'], item_info['quantity'], item_info['sold_quantity']])
    else:
        update.message.reply_text(f'Товар "{name}" не найден на складе.')

def delete_item(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    item_name = update.message.text.split(maxsplit=1)[1]

    # Удаляем товар из словаря
    if item_name in inventory:
        del inventory[item_name]
        update.message.reply_text(f'Товар "{item_name}" удален.')

        # Обновляем CSV файл
        with open(csv_file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Name', 'Description', 'Price', 'Quantity', 'Sold_Quantity'])
            for item_name, item_info in inventory.items():
                writer.writerow([item_name, item_info['description'], item_info['price'], item_info['quantity'], item_info['sold_quantity']])
    else:
        update.message.reply_text(f'Товар "{item_name}" не найден на складе.')

def list_items(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id

    # Выводим список товаров на складе
    if inventory:
        items_list = '\n'.join([f'{name}: {info["description"]}, Цена: {info["price"]}, Количество: {info["quantity"]}' for name, info in inventory.items()])
        update.message.reply_text(f'Товары на складе:\n{items_list}')
    else:
        update.message.reply_text('Склад пуст.')


def dashboard(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(f'Вот ваш дашборд: {dashboard_url}')

def main() -> None:
    # Замените 'YOUR_BOT_TOKEN' на реальный токен вашего бота
    updater = Updater("6840426089:AAG_AHzsuAwdyc_eEF1dpNmooXRtr4rwpl0", use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_item))
    dp.add_handler(CommandHandler("update", update_item))
    dp.add_handler(CommandHandler("delete", delete_item))
    dp.add_handler(CommandHandler("list", list_items))
    dp.add_handler(CommandHandler("dashboard", dashboard))

    updater.start_polling()

    print("Бот запущен. Ожидание обновлений...")

    updater.idle()

if __name__ == '__main__':
    main()
